/*____________________________________________________________________
|
| File: palette.cpp
|
| Description: Functions to read/write to the palette.
|
| Functions:    gxSetPalette
|               gxGetPalette
|               gxSetPaletteEntry
|               gxGetPaletteEntry
|               gxSetUniformPalette
|               gxGetVGAPalette
|               gxCopyPalette
|
| Description: With some drivers, such as VBE 2.0, the get palette
|       function may not be functional so the routines in this file
|       keep track of a buffered palette to send info back to caller
|       when caller requests get palette information.
|
| (C) Copyright 2017 Abonvita Software LLC.
| Licensed under the GX Toolkit License, Version 1.0.
|___________________________________________________________________*/

/*___________________
|
| Include Files
|__________________*/                               

#include <first_header.h>

#include "dp.h"

/*___________________
|
| Global variables
|__________________*/

/* Default VGA palette in 8 bits per primary color BGR format. */
static byte default_VGA_palette [256*3] = {
  0x00,0x00,0x00, 0xA8,0x00,0x00, 0x00,0xA8,0x00, 0xA8,0xA8,0x00,
  0x00,0x00,0xA8, 0xA8,0x00,0xA8, 0x00,0x54,0xA8, 0xA8,0xA8,0xA8,
  0x54,0x54,0x54, 0xFC,0x54,0x54, 0x54,0xFC,0x54, 0xFC,0xFC,0x54,
  0x54,0x54,0xFC, 0xFC,0x54,0xFC, 0x54,0xFC,0xFC, 0xFC,0xFC,0xFC,
  0x00,0x00,0x00, 0x14,0x14,0x14, 0x20,0x20,0x20, 0x2C,0x2C,0x2C,
  0x38,0x38,0x38, 0x44,0x44,0x44, 0x50,0x50,0x50, 0x60,0x60,0x60,
  0x70,0x70,0x70, 0x80,0x80,0x80, 0x90,0x90,0x90, 0xA0,0xA0,0xA0,
  0xB4,0xB4,0xB4, 0xC8,0xC8,0xC8, 0xE0,0xE0,0xE0, 0xFC,0xFC,0xFC,
  0xFC,0x00,0x00, 0xFC,0x00,0x40, 0xFC,0x00,0x7C, 0xFC,0x00,0xBC,
  0xFC,0x00,0xFC, 0xBC,0x00,0xFC, 0x7C,0x00,0xFC, 0x40,0x00,0xFC,
  0x00,0x00,0xFC, 0x00,0x40,0xFC, 0x00,0x7C,0xFC, 0x00,0xBC,0xFC,
  0x00,0xFC,0xFC, 0x00,0xFC,0xBC, 0x00,0xFC,0x7C, 0x00,0xFC,0x40,
  0x00,0xFC,0x00, 0x40,0xFC,0x00, 0x7C,0xFC,0x00, 0xBC,0xFC,0x00,
  0xFC,0xFC,0x00, 0xFC,0xBC,0x00, 0xFC,0x7C,0x00, 0xFC,0x40,0x00,
  0xFC,0x7C,0x7C, 0xFC,0x7C,0x9C, 0xFC,0x7C,0xBC, 0xFC,0x7C,0xDC,
  0xFC,0x7C,0xFC, 0xDC,0x7C,0xFC, 0xBC,0x7C,0xFC, 0x9C,0x7C,0xFC,
  0x7C,0x7C,0xFC, 0x7C,0x9C,0xFC, 0x7C,0xBC,0xFC, 0x7C,0xDC,0xFC,
  0x7C,0xFC,0xFC, 0x7C,0xFC,0xDC, 0x7C,0xFC,0xBC, 0x7C,0xFC,0x9C,
  0x7C,0xFC,0x7C, 0x9C,0xFC,0x7C, 0xBC,0xFC,0x7C, 0xDC,0xFC,0x7C,
  0xFC,0xFC,0x7C, 0xFC,0xDC,0x7C, 0xFC,0xBC,0x7C, 0xFC,0x9C,0x7C,
  0xFC,0xB4,0xB4, 0xFC,0xB4,0xC4, 0xFC,0xB4,0xD8, 0xFC,0xB4,0xE8,
  0xFC,0xB4,0xFC, 0xE8,0xB4,0xFC, 0xD8,0xB4,0xFC, 0xC4,0xB4,0xFC,
  0xB4,0xB4,0xFC, 0xB4,0xC4,0xFC, 0xB4,0xD8,0xFC, 0xB4,0xE8,0xFC,
  0xB4,0xFC,0xFC, 0xB4,0xFC,0xE8, 0xB4,0xFC,0xD8, 0xB4,0xFC,0xC4,
  0xB4,0xFC,0xB4, 0xC4,0xFC,0xB4, 0xD8,0xFC,0xB4, 0xE8,0xFC,0xB4,
  0xFC,0xFC,0xB4, 0xFC,0xE8,0xB4, 0xFC,0xD8,0xB4, 0xFC,0xC4,0xB4,
  0x70,0x00,0x00, 0x70,0x00,0x1C, 0x70,0x00,0x38, 0x70,0x00,0x54,
  0x70,0x00,0x70, 0x54,0x00,0x70, 0x38,0x00,0x70, 0x1C,0x00,0x70,
  0x00,0x00,0x70, 0x00,0x1C,0x70, 0x00,0x38,0x70, 0x00,0x54,0x70,
  0x00,0x70,0x70, 0x00,0x70,0x54, 0x00,0x70,0x38, 0x00,0x70,0x1C,
  0x00,0x70,0x00, 0x1C,0x70,0x00, 0x38,0x70,0x00, 0x54,0x70,0x00,
  0x70,0x70,0x00, 0x70,0x54,0x00, 0x70,0x38,0x00, 0x70,0x1C,0x00,
  0x70,0x38,0x38, 0x70,0x38,0x44, 0x70,0x38,0x54, 0x70,0x38,0x60,
  0x70,0x38,0x70, 0x60,0x38,0x70, 0x54,0x38,0x70, 0x44,0x38,0x70,
  0x38,0x38,0x70, 0x38,0x44,0x70, 0x38,0x54,0x70, 0x38,0x60,0x70,
  0x38,0x70,0x70, 0x38,0x70,0x60, 0x38,0x70,0x54, 0x38,0x70,0x44,
  0x38,0x70,0x38, 0x44,0x70,0x38, 0x54,0x70,0x38, 0x60,0x70,0x38,
  0x70,0x70,0x38, 0x70,0x60,0x38, 0x70,0x54,0x38, 0x70,0x44,0x38,
  0x70,0x50,0x50, 0x70,0x50,0x58, 0x70,0x50,0x60, 0x70,0x50,0x68,
  0x70,0x50,0x70, 0x68,0x50,0x70, 0x60,0x50,0x70, 0x58,0x50,0x70,
  0x50,0x50,0x70, 0x50,0x58,0x70, 0x50,0x60,0x70, 0x50,0x68,0x70,
  0x50,0x70,0x70, 0x50,0x70,0x68, 0x50,0x70,0x60, 0x50,0x70,0x58,
  0x50,0x70,0x50, 0x58,0x70,0x50, 0x60,0x70,0x50, 0x68,0x70,0x50,
  0x70,0x70,0x50, 0x70,0x68,0x50, 0x70,0x60,0x50, 0x70,0x58,0x50,
  0x40,0x00,0x00, 0x40,0x00,0x10, 0x40,0x00,0x20, 0x40,0x00,0x30,
  0x40,0x00,0x40, 0x30,0x00,0x40, 0x20,0x00,0x40, 0x10,0x00,0x40,
  0x00,0x00,0x40, 0x00,0x10,0x40, 0x00,0x20,0x40, 0x00,0x30,0x40,
  0x00,0x40,0x40, 0x00,0x40,0x30, 0x00,0x40,0x20, 0x00,0x40,0x10,
  0x00,0x40,0x00, 0x10,0x40,0x00, 0x20,0x40,0x00, 0x30,0x40,0x00,
  0x40,0x40,0x00, 0x40,0x30,0x00, 0x40,0x20,0x00, 0x40,0x10,0x00,
  0x40,0x20,0x20, 0x40,0x20,0x28, 0x40,0x20,0x30, 0x40,0x20,0x38,
  0x40,0x20,0x40, 0x38,0x20,0x40, 0x30,0x20,0x40, 0x28,0x20,0x40,
  0x20,0x20,0x40, 0x20,0x28,0x40, 0x20,0x30,0x40, 0x20,0x38,0x40,
  0x20,0x40,0x40, 0x20,0x40,0x38, 0x20,0x40,0x30, 0x20,0x40,0x28,
  0x20,0x40,0x20, 0x28,0x40,0x20, 0x30,0x40,0x20, 0x38,0x40,0x20,
  0x40,0x40,0x20, 0x40,0x38,0x20, 0x40,0x30,0x20, 0x40,0x28,0x20,
  0x40,0x2C,0x2C, 0x40,0x2C,0x30, 0x40,0x2C,0x34, 0x40,0x2C,0x3C,
  0x40,0x2C,0x40, 0x3C,0x2C,0x40, 0x34,0x2C,0x40, 0x30,0x2C,0x40,
  0x2C,0x2C,0x40, 0x2C,0x30,0x40, 0x2C,0x34,0x40, 0x2C,0x3C,0x40,
  0x2C,0x40,0x40, 0x2C,0x40,0x3C, 0x2C,0x40,0x34, 0x2C,0x40,0x30,
  0x2C,0x40,0x2C, 0x30,0x40,0x2C, 0x34,0x40,0x2C, 0x3C,0x40,0x2C,
  0x40,0x40,0x2C, 0x40,0x3C,0x2C, 0x40,0x34,0x2C, 0x40,0x30,0x2C,
  0x54,0x54,0x54, 0xFC,0x54,0x54, 0x54,0xFC,0x54, 0xFC,0xFC,0x54,
  0x54,0x54,0xFC, 0xFC,0x54,0xFC, 0x54,0xFC,0xFC, 0xFC,0xFC,0xFC,
};

/*____________________________________________________________________
|
| Function: gxSetPalette
|
| Output: Writes rgb-palette.
|
| Description: rgb_palette is a array of bytes where the first 3 bytes
|       represent the r,g,b value of color 0, then next three bytes are
|       color 1, etc.
|___________________________________________________________________*/

void gxSetPalette (byte *rgb_palette, int num_colors)
{
  // Save info in local palette
  memcpy (gx_Current_palette, rgb_palette, num_colors*3);
}

/*____________________________________________________________________
|
| Function: gxGetPalette
|
| Output: Reads rgb-palette.
|
| Description: rgb_palette is a array of bytes where the first 3 bytes
|       represent the r,g,b value of color 0, then next three bytes are
|       color 1, etc.
|___________________________________________________________________*/

int gxGetPalette (byte *rgb_palette, int num_colors)
{
  int rc;

  memcpy (rgb_palette, gx_Current_palette, num_colors*3);
  rc = TRUE;

  return (rc);
}

/*____________________________________________________________________
|
| Function: gxSetPaletteEntry
|
| Output: Writes an rgb color to one color register.
|
| Description: rgb_color is a array of 3 bytes that represent the r,g,b
|       value of the color.
|___________________________________________________________________*/

void gxSetPaletteEntry (int entry, byte *rgb_color)
{
  // Save info in local palette
  memcpy (&gx_Current_palette[entry*3], rgb_color, 3);
}

/*____________________________________________________________________
|
| Function: gxGetPaletteEntry
|
| Output: Reads an rgb color from one color register.
|
| Description: rgb_color is a array of 3 bytes that represent the r,g,b
|       value of the color.
|___________________________________________________________________*/

int gxGetPaletteEntry (int entry, byte *rgb_color)
{
  int rc;

  memcpy (rgb_color, &gx_Current_palette[entry*3], 3);
  rc = TRUE;

  return (rc);
}

/*____________________________________________________________________
|
| Function: gxSetUniformPalette
|
| Output: Sets entries 40-255 of a palette to be a uniform palette
|       where there are 216 combinations of 6 red intensities, 6 green
|       intensities and 6 blue intensities.  (6*6*6=216 possible
|       combinations).
|
|       palette_spread can be low or high.  If low 125 color registers
|       are used make up the uniform palette.  If high 216 are used.
|
|       Only works with 256-color palettes.
|___________________________________________________________________*/

void gxSetUniformPalette (byte *rgb_palette, int palette_spread)
{
  int n, entry, red, green, blue;
  float div;

  if (palette_spread == gxPALETTE_SPREAD_LOW) {
    entry = 131;
    div   = 4;
    n     = 5;
  }
  else { /* gxPALETTE_SPREAD_HIGH */
    entry = 40;
    div   = 5;
    n     = 6;
  }

  for (red=0; red<n; red++)
    for (green=0; green<n; green++)
      for (blue=0; blue<n; blue++) {
        rgb_palette[entry*3]   = (byte)((63/div) * red  ) << 2;
        rgb_palette[entry*3+1] = (byte)((63/div) * green) << 2;
        rgb_palette[entry*3+2] = (byte)((63/div) * blue ) << 2;
        entry++;
      }
}

/*____________________________________________________________________
|
| Function: gxGetVGAPalette
|
| Output: Fills callers palette buffer with default VGA palette.
|___________________________________________________________________*/

void gxGetVGAPalette (byte *rgb_palette)
{
  int i;

  for (i=0; i<NUM_INDEXED_COLORS; i++) {
    rgb_palette[i*3+0] = default_VGA_palette[i*3+2]; /* set red   */
    rgb_palette[i*3+1] = default_VGA_palette[i*3+1]; /* set green */
    rgb_palette[i*3+2] = default_VGA_palette[i*3+0]; /* set blue  */
  }
}

/*____________________________________________________________________
|
| Function: gxCopyPalette
|
| Output: Copes source palette data to destination palette.
|___________________________________________________________________*/

void gxCopyPalette (
  byte *src_rgb_palette,
  byte *dst_rgb_palette,
  int   start,
  int   num )
{
  int i;

  for (i=start; i<start+num; i++)
    memcpy (&dst_rgb_palette[i*3], &src_rgb_palette[i*3], 3);
}
