/*____________________________________________________________________
|
| File: ms_w7.cpp
|
| Description: Contains functions that manipulate a mouse.
|
| Functions:	msMouseExists
|             msStartMouse
|              Init_Cursor_List
|               Create_System_Cursor
|             msStopMouse
|              Free_Cursor_List
|             msHideMouse
|             msShowMouse
|             msSetMouseSpeed
|             msConfineMouse
|             msGetMouseStatus
|             msSetMouseCoords
|             msGetMouseCoords
|             msGetMouseMovement
|             msMouseInBox
|             msSetMouseCursor
|             msSetCursor
|             msGetCursor
|             msDefineBitmapCursor
|             msDefineSpriteCursor
|
| (C) Copyright 2017 Abonvita Software LLC.
| Licensed under the GX Toolkit License, Version 1.0.
|___________________________________________________________________*/

/*___________________
|
| Include Files
|__________________*/

#include <first_header.h>

#include "dp.h"
#include "cursor.h"

/*___________________
|
| Type definitions
|__________________*/

typedef struct {
  int hot_x, hot_y;
  byte screen_mask [4*32];
  byte cursor_mask [4*32];
} CursorShape;

/*___________________
|
| Function Prototypes
|__________________*/

static void Init_Cursor_List (void);
static void Create_System_Cursor (
  int          cursor,
  CursorShape *shape,
  int          dx,
  int          dy );
static void Free_Cursor_List (void);

/*___________________
|
| Defines
|__________________*/

#define MAX_CURSORS     32

/*___________________
|
| Predefined mouse cursors
|__________________*/

CursorShape cursor_small_arrow = { // default cursor
  // x,y
  2, 1,
  // screen mask
  {
  0x60, 0x00,   // 0110000000000000
  0x70, 0x00,   // 0111000000000000
  0x78, 0x00,   // 0111100000000000
  0x7C, 0x00,   // 0111110000000000
  0x7E, 0x00,   // 0111111000000000
  0x7F, 0x00,   // 0111111100000000
  0x7F, 0x80,   // 0111111110000000
  0x7F, 0xC0,   // 0111111111000000
  0x7F, 0xE0,   // 0111111111100000
  0x7F, 0xC0,   // 0111111111000000
  0x7F, 0x00,   // 0111111100000000
  0x77, 0x80,   // 0111011110000000
  0x67, 0x80,   // 0110011110000000
  0x03, 0xC0,   // 0000001111000000
  0x03, 0xC0,   // 0000001111000000
  0x01, 0xC0    // 0000000111000000
  },
  // cursor mask
  {
  0x00, 0x00,   // 0000000000000000
  0x20, 0x00,   // 0010000000000000
  0x30, 0x00,   // 0011000000000000
  0x38, 0x00,   // 0011100000000000
  0x3C, 0x00,   // 0011110000000000
  0x3E, 0x00,   // 0011111000000000
  0x3F, 0x00,   // 0011111100000000
  0x3F, 0x80,   // 0011111110000000
  0x3F, 0xC0,   // 0011111111000000
  0x3E, 0x00,   // 0011111000000000
  0x36, 0x00,   // 0011011000000000
  0x23, 0x00,   // 0010001100000000
  0x03, 0x00,   // 0000001100000000
  0x01, 0x80,   // 0000000110000000
  0x01, 0x80,   // 0000000110000000
  0x00, 0x00    // 0000000000000000
  }              
};

CursorShape cursor_medium_arrow = {
  // x,y
  1, 2,
  // screen mask
  {
  0x80, 0x00,   // 1000000000000000
  0xC0, 0x00,   // 1100000000000000
  0xE0, 0x00,   // 1110000000000000
  0xF0, 0x00,   // 1111000000000000
  0xF8, 0x00,   // 1111100000000000
  0xFC, 0x00,   // 1111110000000000
  0xFE, 0x00,   // 1111111000000000
  0xFF, 0x00,   // 1111111100000000
  0xFF, 0x80,   // 1111111110000000
  0xFF, 0xC0,   // 1111111111000000
  0xFF, 0xE0,   // 1111111111100000
  0xFE, 0x00,   // 1111111000000000
  0xEF, 0x00,   // 1110111100000000
  0xCF, 0x00,   // 1100111100000000
  0x87, 0x80,   // 1000011110000000
  0x07, 0x80,   // 0000011110000000
  0x03, 0xC0,   // 0000001111000000
  0x03, 0xC0,   // 0000001111000000
  0x01, 0x80    // 0000000110000000
  },
  // cursor mask
  {
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x40, 0x00,   // 0100000000000000
  0x60, 0x00,   // 0110000000000000
  0x70, 0x00,   // 0111000000000000
  0x78, 0x00,   // 0111100000000000
  0x7C, 0x00,   // 0111110000000000
  0x7E, 0x00,   // 0111111000000000
  0x7F, 0x00,   // 0111111100000000
  0x7F, 0x80,   // 0111111110000000
  0x7C, 0x00,   // 0111110000000000
  0x6C, 0x00,   // 0110110000000000
  0x46, 0x00,   // 0100011000000000
  0x06, 0x00,   // 0000011000000000
  0x03, 0x00,   // 0000001100000000
  0x03, 0x00,   // 0000001100000000
  0x01, 0x80,   // 0000000110000000
  0x01, 0x80,   // 0000000110000000
  0x00, 0x00    // 0000000000000000
  }
};

CursorShape cursor_large_arrow = {
  // x,y
  2, 1,
  // screen mask
  {
  0x60, 0x00, 0x00,     // 011000000000000000000000
  0x70, 0x00, 0x00,     // 011100000000000000000000
  0x78, 0x00, 0x00,     // 011110000000000000000000
  0x7C, 0x00, 0x00,     // 011111000000000000000000
  0x7E, 0x00, 0x00,     // 011111100000000000000000
  0x7F, 0x00, 0x00,     // 011111110000000000000000
  0x7F, 0x80, 0x00,     // 011111111000000000000000
  0x7F, 0xC0, 0x00,     // 011111111100000000000000
  0x7F, 0xE0, 0x00,     // 011111111110000000000000
  0x7F, 0xF0, 0x00,     // 011111111111000000000000
  0x7F, 0xF8, 0x00,     // 011111111111100000000000
  0x7F, 0xFC, 0x00,     // 011111111111110000000000
  0x7F, 0xFE, 0x00,     // 011111111111111000000000
  0x7F, 0xFF, 0x00,     // 011111111111111100000000
  0x7F, 0xFF, 0x80,     // 011111111111111110000000
  0x7F, 0xFF, 0xC0,     // 011111111111111111000000
  0x7F, 0xFF, 0xE0,     // 011111111111111111100000
  0x7F, 0xFF, 0xF0,     // 011111111111111111110000
  0x7F, 0xFF, 0xF0,     // 011111111111111111110000
  0x7F, 0xF8, 0x00,     // 011111111111100000000000
  0x7F, 0xFC, 0x00,     // 011111111111110000000000
  0x7C, 0xFC, 0x00,     // 011111001111110000000000
  0x78, 0xFE, 0x00,     // 011110001111111000000000
  0x70, 0x7E, 0x00,     // 011100000111111000000000
  0x60, 0x7F, 0x00,     // 011000000111111100000000
  0x00, 0x3F, 0x00,     // 000000000011111100000000
  0x00, 0x3F, 0x80,     // 000000000011111110000000
  0x00, 0x1F, 0x80,     // 000000000001111110000000
  0x00, 0x1F, 0xC0,     // 000000000001111111000000
  0x00, 0x0F, 0xC0,     // 000000000000111111000000
  0x00, 0x0F, 0xC0,     // 000000000000111111000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  },
  // cursor mask
  {
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x20, 0x00, 0x00,     // 001000000000000000000000
  0x30, 0x00, 0x00,     // 001100000000000000000000
  0x38, 0x00, 0x00,     // 001110000000000000000000
  0x3C, 0x00, 0x00,     // 001111000000000000000000
  0x3E, 0x00, 0x00,     // 001111100000000000000000
  0x3F, 0x00, 0x00,     // 001111110000000000000000
  0x3F, 0x80, 0x00,     // 001111111000000000000000
  0x3F, 0xC0, 0x00,     // 001111111100000000000000
  0x3F, 0xE0, 0x00,     // 001111111110000000000000
  0x3F, 0xF0, 0x00,     // 001111111111000000000000
  0x3F, 0xF8, 0x00,     // 001111111111100000000000
  0x3F, 0xFC, 0x00,     // 001111111111110000000000
  0x3F, 0xFE, 0x00,     // 001111111111111000000000
  0x3F, 0xFF, 0x00,     // 001111111111111100000000
  0x3F, 0xFF, 0x80,     // 001111111111111110000000
  0x3F, 0xFF, 0xC0,     // 001111111111111111000000
  0x3F, 0xFF, 0xE0,     // 001111111111111111100000
  0x3F, 0xF0, 0x00,     // 001111111111000000000000
  0x3F, 0xF0, 0x00,     // 001111111111000000000000
  0x3C, 0x78, 0x00,     // 001111000111100000000000
  0x38, 0x78, 0x00,     // 001110000111100000000000
  0x30, 0x3C, 0x00,     // 001100000011110000000000
  0x20, 0x3C, 0x00,     // 001000000011110000000000
  0x00, 0x1E, 0x00,     // 000000000001111000000000
  0x00, 0x1E, 0x00,     // 000000000001111000000000
  0x00, 0x0F, 0x00,     // 000000000000111100000000
  0x00, 0x0F, 0x00,     // 000000000000111100000000
  0x00, 0x07, 0x80,     // 000000000000011110000000
  0x00, 0x07, 0x80,     // 000000000000011110000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  }
};

CursorShape cursor_small_hand = {
  // x,y
  4, 0,
  // screen mask
  {
  0x1E, 0x00,   // 0001111000000000
  0x1E, 0x00,   // 0001111000000000
  0x1E, 0x00,   // 0001111000000000
  0x1E, 0x00,   // 0001111000000000
  0x1E, 0x00,   // 0001111000000000
  0x1F, 0xFF,   // 0001111111111111
  0x1F, 0xFF,   // 0001111111111111
  0x1F, 0xFF,   // 0001111111111111
  0xFF, 0xFF,   // 1111111111111111
  0xFF, 0xFF,   // 1111111111111111
  0xFF, 0xFF,   // 1111111111111111
  0xFF, 0xFF,   // 1111111111111111
  0xFF, 0xFF,   // 1111111111111111
  0xFF, 0xFF,   // 1111111111111111
  0xFF, 0xFF,   // 1111111111111111
  0xFF, 0xFF    // 1111111111111111
  },
  // cursor mask
  {
  0x1E, 0x00,   // 0001111000000000
  0x12, 0x00,   // 0001001000000000
  0x12, 0x00,   // 0001001000000000
  0x12, 0x00,   // 0001001000000000
  0x12, 0x00,   // 0001001000000000
  0x13, 0xFF,   // 0001001111111111
  0x12, 0x49,   // 0001001001001001
  0x12, 0x49,   // 0001001001001001
  0xF2, 0x49,   // 1111001001001001
  0x90, 0x01,   // 1001000000000001
  0x90, 0x01,   // 1001000000000001
  0x90, 0x01,   // 1001000000000001
  0x80, 0x01,   // 1000000000000001
  0x80, 0x01,   // 1000000000000001
  0x80, 0x01,   // 1000000000000001
  0xFF, 0xFF    // 1111111111111111
  }
};

CursorShape cursor_large_hand = {
  // x,y
  9, 0,
  // screen mask
  {
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x03, 0xFF, 0xFF, 0xFE,       // 00000011111111111111111111111110
  0x03, 0xFF, 0xFF, 0xFE,       // 00000011111111111111111111111110
  0x03, 0xFF, 0xFF, 0xFE,       // 00000011111111111111111111111110
  0x03, 0xFF, 0xFF, 0xFE,       // 00000011111111111111111111111110
  0x03, 0xFF, 0xFF, 0xFE,       // 00000011111111111111111111111110
  0x03, 0xFF, 0xFF, 0xFE,       // 00000011111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE,       // 11111111111111111111111111111110
  0xFF, 0xFF, 0xFF, 0xFE        // 11111111111111111111111111111110
  },
  // cursor mask
  {
  0x03, 0xF8, 0x00, 0x00,       // 00000011111110000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x08, 0x00, 0x00,       // 00000010000010000000000000000000
  0x02, 0x0F, 0xFF, 0xFE,       // 00000010000011111111111111111110
  0x02, 0x08, 0x20, 0x82,       // 00000010000010000010000010000010
  0x02, 0x08, 0x20, 0x82,       // 00000010000010000010000010000010
  0x02, 0x08, 0x20, 0x82,       // 00000010000010000010000010000010
  0x02, 0x08, 0x20, 0x82,       // 00000010000010000010000010000010
  0x02, 0x08, 0x20, 0x82,       // 00000010000010000010000010000010
  0xFE, 0x08, 0x20, 0x82,       // 11111110000010000010000010000010
  0x82, 0x00, 0x00, 0x02,       // 10000010000000000000000000000010
  0x82, 0x00, 0x00, 0x02,       // 10000010000000000000000000000010
  0x82, 0x00, 0x00, 0x02,       // 10000010000000000000000000000010
  0x82, 0x00, 0x00, 0x02,       // 10000010000000000000000000000010
  0x82, 0x00, 0x00, 0x02,       // 10000010000000000000000000000010
  0x82, 0x00, 0x00, 0x02,       // 10000010000000000000000000000010
  0x80, 0x00, 0x00, 0x02,       // 10000000000000000000000000000010
  0x80, 0x00, 0x00, 0x02,       // 10000000000000000000000000000010
  0x80, 0x00, 0x00, 0x02,       // 10000000000000000000000000000010
  0x80, 0x00, 0x00, 0x02,       // 10000000000000000000000000000010
  0x80, 0x00, 0x00, 0x02,       // 10000000000000000000000000000010
  0x80, 0x00, 0x00, 0x02,       // 10000000000000000000000000000010
  0x80, 0x00, 0x00, 0x02,       // 10000000000000000000000000000010
  0x80, 0x00, 0x00, 0x02,       // 10000000000000000000000000000010
  0xFF, 0xFF, 0xFF, 0xFE        // 11111111111111111111111111111110
  }
};

CursorShape cursor_small_crosshair = {
  // x,y
  7, 7,
  // screen mask
  {
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0xFC, 0x7E,   // 1111110001111110
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0xFC, 0x7E,   // 1111110001111110
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x00, 0x00    // 0000000000000000
  },             
  // cursor mask
  {
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0xFC, 0x7E,   // 1111110001111110
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0xFC, 0x7E,   // 1111110001111110
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x04, 0x40,   // 0000010001000000
  0x00, 0x00    // 0000000000000000
  }
};

CursorShape cursor_large_crosshair = {
  // x,y
  15, 15,
  // screen mask
  {
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0xFF, 0xF8, 0x3F, 0xFE,       // 11111111111110000011111111111110
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0xFF, 0xF8, 0x3F, 0xFE,       // 11111111111110000011111111111110
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x00, 0x00, 0x00        // 00000000000000000000000000000000
  },
  // cursor mask
  {
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0xFF, 0xF8, 0x3F, 0xFE,       // 11111111111110000011111111111110
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0x00, 0x00, 0x00, 0x00,       // 00000000000000000000000000000000
  0xFF, 0xF8, 0x3F, 0xFE,       // 11111111111110000011111111111110
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x08, 0x20, 0x00,       // 00000000000010000010000000000000
  0x00, 0x00, 0x00, 0x00        // 00000000000000000000000000000000
  }
};

CursorShape cursor_small_bucket = {
  // x,y
  1, 14,
  // screen mask
  {
  0x00, 0x80,   // 0000000010000000
  0x01, 0xC0,   // 0000000111000000
  0x01, 0xC0,   // 0000000111000000
  0x01, 0xC0,   // 0000000111000000
  0x03, 0xE0,   // 0000001111100000
  0x07, 0xF0,   // 0000011111110000
  0x0F, 0xF8,   // 0000111111111000
  0x1D, 0xDC,   // 0001110111011100
  0x38, 0x8E,   // 0011100010001110
  0x7C, 0x1C,   // 0111110000011100
  0xFE, 0x38,   // 1111111000111000
  0xFF, 0x70,   // 1111111101110000
  0xF3, 0xE0,   // 1111011111100000
  0xE1, 0xC0,   // 1110000111000000
  0xE0, 0x80,   // 1110000010000000
  0x00, 0x00    // 0000000000000000
  },
  // cursor mask
  {
  0x00, 0x00,   // 0000000000000000
  0x00, 0x80,   // 0000000010000000
  0x00, 0x80,   // 0000000010000000
  0x00, 0x80,   // 0000000010000000
  0x01, 0xC0,   // 0000000111000000
  0x02, 0xA0,   // 0000001010100000
  0x04, 0x90,   // 0000010010010000
  0x08, 0x88,   // 0000100010001000
  0x10, 0x04,   // 0001000000000100
  0x28, 0x08,   // 0010100000001000
  0x74, 0x10,   // 0111010000010000
  0x72, 0x20,   // 0111001000100000
  0x61, 0x40,   // 0110000101000000
  0x40, 0x80,   // 0100000010000000
  0x40, 0x00,   // 0100000000000000
  0x00, 0x00    // 0000000000000000
  }
};

CursorShape cursor_large_bucket = {
  // x,y
  1, 24,
  // screen mask
  {
  0x00, 0x08, 0x00,     // 000000000000100000000000
  0x00, 0x1C, 0x00,     // 000000000001110000000000
  0x00, 0x1C, 0x00,     // 000000000001110000000000
  0x00, 0x1C, 0x00,     // 000000000001110000000000
  0x00, 0x1C, 0x00,     // 000000000001110000000000
  0x00, 0x1C, 0x00,     // 000000000001110000000000
  0x00, 0x1C, 0x00,     // 000000000001110000000000
  0x00, 0x3E, 0x00,     // 000000000011111000000000
  0x00, 0x7F, 0x00,     // 000000000111111100000000
  0x00, 0xFF, 0x80,     // 000000001111111110000000
  0x01, 0xDD, 0xC0,     // 000000011101110111000000
  0x03, 0x9C, 0xE0,     // 000000111001110011100000
  0x07, 0x8C, 0x70,     // 000001111000110001110000
  0x0E, 0x08, 0x38,     // 000011100000100000111000
  0x1C, 0x00, 0x1C,     // 000111000000000000011100
  0x38, 0x00, 0x0E,     // 001110000000000000001110
  0x7C, 0x00, 0x1C,     // 011111000000000000011100
  0xFE, 0x00, 0x38,     // 111111100000000000111000
  0xFF, 0x00, 0x70,     // 111111110000000001110000
  0xFF, 0x80, 0xE0,     // 111111111000000011100000
  0xF9, 0xC1, 0xC0,     // 111110011100000111000000
  0xF0, 0xE3, 0x80,     // 111100001110001110000000
  0xE0, 0x77, 0x00,     // 111000000111011100000000
  0xE0, 0x3E, 0x00,     // 111000000011111000000000
  0xE0, 0x1C, 0x00,     // 111000000001110000000000
  0x00, 0x08, 0x00,     // 000000000000100000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  },
  // cursor mask
  {
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x08, 0x00,     // 000000000000100000000000
  0x00, 0x08, 0x00,     // 000000000000100000000000
  0x00, 0x08, 0x00,     // 000000000000100000000000
  0x00, 0x08, 0x00,     // 000000000000100000000000
  0x00, 0x08, 0x00,     // 000000000000100000000000
  0x00, 0x08, 0x00,     // 000000000000100000000000
  0x00, 0x1C, 0x00,     // 000000000001110000000000
  0x00, 0x2A, 0x00,     // 000000000010101000000000
  0x00, 0x49, 0x00,     // 000000000100100100000000
  0x00, 0x88, 0x80,     // 000000001000100010000000
  0x01, 0x08, 0x40,     // 000000010000100001000000
  0x02, 0x08, 0x20,     // 000000100000100000100000
  0x04, 0x00, 0x10,     // 000001000000000000010000
  0x08, 0x00, 0x08,     // 000010000000000000001000
  0x10, 0x00, 0x04,     // 000100000000000000000100
  0x28, 0x00, 0x08,     // 001010000000000000001000
  0x74, 0x00, 0x10,     // 011101000000000000010000
  0x7A, 0x00, 0x20,     // 011110100000000000100000
  0x79, 0x00, 0x40,     // 011110010000000001000000
  0x70, 0x80, 0x80,     // 011100001000000010000000
  0x60, 0x41, 0x00,     // 011000000100000100000000
  0x40, 0x22, 0x00,     // 010000000010001000000000
  0x40, 0x14, 0x00,     // 010000000001010000000000
  0x40, 0x08, 0x00,     // 010000000000100000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  }
};

CursorShape cursor_small_eyedropper = {
  // x,y
  1, 14,
  // screen mask
  {
  0x00, 0x0F,   // 0000000000001111
  0x00, 0x1F,   // 0000000000011111
  0x01, 0xBF,   // 0000000110111111
  0x03, 0xFF,   // 0000001111111111
  0x03, 0xFE,   // 0000001111111110
  0x01, 0xFC,   // 0000000111111100
  0x03, 0xF8,   // 0000001111111000
  0x07, 0xFC,   // 0000011111111100
  0x0F, 0xFC,   // 0000111111111100
  0x1F, 0xD8,   // 0001111111011000
  0x3F, 0x80,   // 0011111110000000
  0x7F, 0x00,   // 0111111100000000
  0x7E, 0x00,   // 0111111000000000
  0x7C, 0x00,   // 0111110000000000
  0x78, 0x00,   // 0111100000000000
  0x00, 0x00    // 0000000000000000
  },             
  // cursor mask
  {
  0x00, 0x00,   // 0000000000000000
  0x00, 0x0E,   // 0000000000001110
  0x00, 0x1E,   // 0000000000011110
  0x01, 0xBE,   // 0000000110111110
  0x01, 0xFC,   // 0000000111111100
  0x00, 0xF8,   // 0000000011111000
  0x01, 0x70,   // 0000000101110000
  0x02, 0x38,   // 0000001000111000
  0x04, 0x58,   // 0000010001011000
  0x08, 0x80,   // 0000100010000000
  0x11, 0x00,   // 0001000100000000
  0x22, 0x00,   // 0010001000000000
  0x44, 0x00,   // 0100010000000000
  0x48, 0x00,   // 0100100000000000
  0x70, 0x00,   // 0111000000000000
  0x00, 0x00    // 0000000000000000
  }
};

CursorShape cursor_large_eyedropper = {
  // x,y
  2, 21,
  // screen mask
  {
  0x00, 0x00, 0x1F,     // 000000000000000000011111
  0x00, 0x00, 0x3F,     // 000000000000000000111111
  0x00, 0x0C, 0x7F,     // 000000000000110001111111
  0x00, 0x1E, 0xFF,     // 000000000001111011111111
  0x00, 0x1F, 0xFF,     // 000000000001111111111111
  0x00, 0x1F, 0xFE,     // 000000000001111111111110
  0x00, 0x0F, 0xFC,     // 000000000000111111111100
  0x00, 0x0F, 0xF8,     // 000000000000111111111000
  0x00, 0x1F, 0xF0,     // 000000000001111111110000
  0x00, 0x3F, 0xF8,     // 000000000011111111111000
  0x00, 0x7F, 0xFC,     // 000000000111111111111100
  0x00, 0xFF, 0xFC,     // 000000001111111111111100
  0x01, 0xFF, 0x38,     // 000000011111111100111000
  0x03, 0xFE, 0x00,     // 000000111111111000000000
  0x07, 0xFC, 0x00,     // 000001111111110000000000
  0x0F, 0xF8, 0x00,     // 000011111111100000000000
  0x1F, 0xF0, 0x00,     // 000111111111000000000000
  0x3F, 0xE0, 0x00,     // 001111111110000000000000
  0x3F, 0xC0, 0x00,     // 001111111100000000000000
  0x3F, 0x80, 0x00,     // 001111111000000000000000
  0x3F, 0x00, 0x00,     // 001111110000000000000000
  0x3E, 0x00, 0x00,     // 001111100000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  },
  // cursor mask
  {
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x1E,     // 000000000000000000011110
  0x00, 0x00, 0x3E,     // 000000000000000000111110
  0x00, 0x0C, 0x7E,     // 000000000000110001111110
  0x00, 0x0E, 0xFE,     // 000000000000111011111110
  0x00, 0x0F, 0xFC,     // 000000000000111111111100
  0x00, 0x07, 0xF8,     // 000000000000011111111000
  0x00, 0x07, 0xF0,     // 000000000000011111110000
  0x00, 0x09, 0xE0,     // 000000000000100111100000
  0x00, 0x10, 0xF0,     // 000000000001000011110000
  0x00, 0x20, 0xF8,     // 000000000010000011111000
  0x00, 0x41, 0x38,     // 000000000100000100111000
  0x00, 0x82, 0x00,     // 000000001000001000000000
  0x01, 0x04, 0x00,     // 000000010000010000000000
  0x02, 0x08, 0x00,     // 000000100000100000000000
  0x04, 0x10, 0x00,     // 000001000001000000000000
  0x08, 0x20, 0x00,     // 000010000010000000000000
  0x10, 0x40, 0x00,     // 000100000100000000000000
  0x20, 0x80, 0x00,     // 001000001000000000000000
  0x21, 0x00, 0x00,     // 001000010000000000000000
  0x22, 0x00, 0x00,     // 001000100000000000000000
  0x3C, 0x00, 0x00,     // 001111000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  }
};

CursorShape cursor_small_stretcher = {
  // x,y
  0, 0,
  // screen mask
  {
  0xFF, 0x00,   // 1111111100000000
  0xFF, 0x00,   // 1111111100000000
  0xFF, 0x00,   // 1111111100000000
  0xFF, 0x00,   // 1111111100000000
  0xFF, 0x00,   // 1111111100000000
  0xFF, 0x00,   // 1111111100000000
  0xFF, 0x00,   // 1111111100000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00    // 0000000000000000
  },
  // cursor mask
  {
  0xFF, 0x00,   // 1111111100000000
  0x81, 0x00,   // 1000000100000000
  0xB5, 0x00,   // 1011010100000000
  0x85, 0x00,   // 1000010100000000
  0xBD, 0x00,   // 1011110100000000
  0x81, 0x00,   // 1000000100000000
  0xFF, 0x00,   // 1111111100000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00    // 0000000000000000
  }
};

CursorShape cursor_large_stretcher = {
  // x,y
  0, 0,
  // screen mask
  {
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  },
  // cursor mask
  {
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xC0, 0x03, 0x00,     // 110000000000001100000000
  0xC0, 0x03, 0x00,     // 110000000000001100000000
  0xCF, 0x33, 0x00,     // 110011110011001100000000
  0xCF, 0x33, 0x00,     // 110011110011001100000000
  0xC0, 0x33, 0x00,     // 110000000011001100000000
  0xC0, 0x33, 0x00,     // 110000000011001100000000
  0xCF, 0xF3, 0x00,     // 110011111111001100000000
  0xCF, 0xF3, 0x00,     // 110011111111001100000000
  0xC0, 0x03, 0x00,     // 110000000000001100000000
  0xC0, 0x03, 0x00,     // 110000000000001100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0xFF, 0xFF, 0x00,     // 111111111111111100000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  }                      
};

CursorShape cursor_small_watch = {
  // x,y
  4, 7,
  // screen mask
  {
  0x3E, 0x00,   // 0011111000000000
  0x3E, 0x00,   // 0011111000000000
  0x3E, 0x00,   // 0011111000000000
  0x3E, 0x00,   // 0011111000000000
  0x3E, 0x00,   // 0011111000000000
  0x7F, 0x00,   // 0111111100000000
  0xFF, 0x80,   // 1111111110000000
  0xFF, 0x80,   // 1111111110000000
  0xFF, 0x80,   // 1111111110000000
  0x7F, 0x00,   // 0111111100000000
  0x3E, 0x00,   // 0011111000000000
  0x3E, 0x00,   // 0011111000000000
  0x3E, 0x00,   // 0011111000000000
  0x3E, 0x00,   // 0011111000000000
  0x3E, 0x00,   // 0011111000000000
  0x00, 0x00    // 0000000000000000
  },
  // cursor mask
  {
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x14, 0x00,   // 0001010000000000
  0x36, 0x00,   // 0011011000000000
  0x77, 0x00,   // 0111011100000000
  0x71, 0x00,   // 0111000100000000
  0x7F, 0x00,   // 0111111100000000
  0x3E, 0x00,   // 0011111000000000
  0x1C, 0x00,   // 0001110000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00,   // 0000000000000000
  0x00, 0x00    // 0000000000000000
  }
};

CursorShape cursor_large_watch = {
  // x,y
  8, 14,
  // screen mask
  {
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x3F, 0xFF, 0x00,     // 001111111111111100000000
  0x3F, 0xFF, 0x00,     // 001111111111111100000000
  0xFF, 0xFF, 0xC0,     // 111111111111111111000000
  0xFF, 0xFF, 0xC0,     // 111111111111111111000000
  0xFF, 0xFF, 0xC0,     // 111111111111111111000000
  0xFF, 0xFF, 0xC0,     // 111111111111111111000000
  0xFF, 0xFF, 0xC0,     // 111111111111111111000000
  0xFF, 0xFF, 0xC0,     // 111111111111111111000000
  0x3F, 0xFF, 0x00,     // 001111111111111100000000
  0x3F, 0xFF, 0x00,     // 001111111111111100000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  },
  // cursor mask
  {
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x03, 0x30, 0x00,     // 000000110011000000000000
  0x03, 0x30, 0x00,     // 000000110011000000000000
  0x0F, 0x3C, 0x00,     // 000011110011110000000000
  0x0F, 0x3C, 0x00,     // 000011110011110000000000
  0x3F, 0x3F, 0x00,     // 001111110011111100000000
  0x3F, 0x3F, 0x00,     // 001111110011111100000000
  0x3F, 0x03, 0x00,     // 001111110000001100000000
  0x3F, 0x03, 0x00,     // 001111110000001100000000
  0x3F, 0xFF, 0x00,     // 001111111111111100000000
  0x3F, 0xFF, 0x00,     // 001111111111111100000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x0F, 0xFC, 0x00,     // 000011111111110000000000
  0x03, 0xF0, 0x00,     // 000000111111000000000000
  0x03, 0xF0, 0x00,     // 000000111111000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00,     // 000000000000000000000000
  0x00, 0x00, 0x00      // 000000000000000000000000
  }
};

/*___________________
|
| Globals
|__________________*/

static int ms_Mouse_exists = FALSE;             // true if a mouse is present
static int ms_Cursor_auto_tracking = FALSE;     // true is auto tracking enabled

static CursorInfo ms_Cursor_list [MAX_CURSORS];
static int      ms_Mouse_cursor;
static int      ms_Button_mask;

// Pointers to driver functions
static void	(*Mouse_flush_buffer) (void);
static void (*Mouse_hide) (void);
static void (*Mouse_show) (void);
static void (*Mouse_confine) (int left, int top, int right, int bottom);
static int  (*Mouse_get_status) (int *x, int *y, int *button);
static void (*Mouse_set_coords) (int x, int y);
static void (*Mouse_get_coords) (int *x, int *y);
static void (*Mouse_get_movement) (int *x, int *y);
static void	(*Mouse_set_bitmap_cursor) (
	byte *cursor_bitmap, 
	byte *mask_bitmap, 
	int		bitmap_dx, 
	int		bitmap_dy, 
	int		hot_x, 
	int		hot_y, 
	byte	cursor_color_r, 
  byte  cursor_color_g,
  byte  cursor_color_b,
	byte	mask_color_r,
  byte  mask_color_g,
  byte  mask_color_b );
static void	(*Mouse_set_image_cursor) (
	byte *image, 
	int		image_dx, 
	int		image_dy, 
	int		hot_x, 
	int		hot_y );

/*____________________________________________________________________
|
| Function: msMouseExists
|
| Outputs: Returns true if mouse exists in the system.
|
| Description: Must call msStartMouse first() to initialize mouse, if any.
|___________________________________________________________________*/

int msMouseExists (void)
{
  return (ms_Mouse_exists);
}

/*____________________________________________________________________
|
| Function: msStartMouse
|
| Outputs: Call this routine at the beginning of your program, after
|   the graphics video mode has been initialized.  It will initialize
|   the mouse and position and draw the mouse cursor at the top left of
|   the screen, if a mouse is present in the system.  Returns true if a
|   mouse is in the system, else false.
|
|   Assumes a mouse is present.
|___________________________________________________________________*/

int msStartMouse (int cursor_auto_tracking, int driver)
{
  int width;

  // Set driver functions
  switch (driver) {
#ifdef USING_DIRECTX_5
    case msDRIVER_DX5:  
      Mouse_flush_buffer      = dx5_MouseFlushBuffer;
      Mouse_hide              = dx5_MouseHide;
      Mouse_show              = dx5_MouseShow;
      Mouse_confine           = dx5_MouseConfine;
      Mouse_get_status        = dx5_MouseGetStatus;
      Mouse_set_coords        = dx5_MouseSetCoords;
      Mouse_get_coords        = dx5_MouseGetCoords;
      Mouse_get_movement      = dx5_MouseGetMovement;
      Mouse_set_bitmap_cursor = dx5_MouseSetBitmapCursor_RGB;
      Mouse_set_image_cursor  = dx5_MouseSetImageCursor;
      break;                          
#endif
#ifdef USING_DIRECTX_8
    case msDRIVER_DX8:  
      Mouse_flush_buffer      = dx8_MouseFlushBuffer;
      Mouse_hide              = dx8_MouseHide;
      Mouse_show              = dx8_MouseShow;
      Mouse_confine           = dx8_MouseConfine;
      Mouse_get_status        = dx8_MouseGetStatus;
      Mouse_set_coords        = dx8_MouseSetCoords;
      Mouse_get_coords        = dx8_MouseGetCoords;
      Mouse_get_movement      = dx8_MouseGetMovement;
      Mouse_set_bitmap_cursor = dx8_MouseSetBitmapCursor;
      Mouse_set_image_cursor  = dx8_MouseSetImageCursor;
      break;                          
#endif
#ifdef USING_DIRECTX_9
    case msDRIVER_DX9:  
      Mouse_flush_buffer      = dx9_MouseFlushBuffer;
      Mouse_hide              = dx9_MouseHide;
      Mouse_show              = dx9_MouseShow;
      Mouse_confine           = dx9_MouseConfine;
      Mouse_get_status        = dx9_MouseGetStatus;
      Mouse_set_coords        = dx9_MouseSetCoords;
      Mouse_get_coords        = dx9_MouseGetCoords;
      Mouse_get_movement      = dx9_MouseGetMovement;
      Mouse_set_bitmap_cursor = dx9_MouseSetBitmapCursor;
      Mouse_set_image_cursor  = dx9_MouseSetImageCursor;
      break;                          
#endif
  }     

  // Assume mouse is in the system
  ms_Cursor_auto_tracking = cursor_auto_tracking;
  ms_Mouse_exists         = TRUE;
  // Init shift variable
  width = gxGetScreenWidth ();
  if (width == 320) 
    width *= 2;

  // Build internal cursors 
  Init_Cursor_List ();
  // Set default cursor (small arrow)
  msSetCursor (0, ms_Cursor_list[0].color, ms_Cursor_list[0].mask_color);
  
  // Draw mouse cursor in upper left corner of screen
  msSetMouseCoords (0, 0);
  
//  if (NOT ms_Cursor_auto_tracking)
//    Cursor_Init (&ms_Cursor_list[ms_Mouse_cursor]);
  
  msConfineMouse (0, 0, width-1, gxGetScreenHeight()-1);
  msShowMouse ();

  return (ms_Mouse_exists);
}

/*____________________________________________________________________
|
| Function: Init_Cursor_List
|
| Input: Called from msStartMouse()
| Output: Initializes cursor list.
|___________________________________________________________________*/

static void Init_Cursor_List (void)
{
  int i;

  // Set entire list to empty
  for (i=0; i<MAX_CURSORS; i++)
    ms_Cursor_list[i].type = 0;

  // Build all predefined cursors
  Create_System_Cursor (msCURSOR_SMALL_ARROW,      &cursor_small_arrow,      16, 16);
  Create_System_Cursor (msCURSOR_MEDIUM_ARROW,     &cursor_medium_arrow,     16, 19);
  Create_System_Cursor (msCURSOR_LARGE_ARROW,      &cursor_large_arrow,      24, 32);
  Create_System_Cursor (msCURSOR_SMALL_HAND,       &cursor_small_hand,       16, 16);
  Create_System_Cursor (msCURSOR_LARGE_HAND,       &cursor_large_hand,       32, 32);
  Create_System_Cursor (msCURSOR_SMALL_CROSSHAIR,  &cursor_small_crosshair,  16, 16);
  Create_System_Cursor (msCURSOR_LARGE_CROSSHAIR,  &cursor_large_crosshair,  32, 32);
  Create_System_Cursor (msCURSOR_SMALL_BUCKET,     &cursor_small_bucket,     16, 16);
  Create_System_Cursor (msCURSOR_LARGE_BUCKET,     &cursor_large_bucket,     24, 32);
  Create_System_Cursor (msCURSOR_SMALL_EYEDROPPER, &cursor_small_eyedropper, 16, 16);
  Create_System_Cursor (msCURSOR_LARGE_EYEDROPPER, &cursor_large_eyedropper, 24, 32);
  Create_System_Cursor (msCURSOR_SMALL_STRETCHER,  &cursor_small_stretcher,  16, 16);
  Create_System_Cursor (msCURSOR_LARGE_STRETCHER,  &cursor_large_stretcher,  24, 32);
  Create_System_Cursor (msCURSOR_SMALL_WATCH,      &cursor_small_watch,      16, 16);
  Create_System_Cursor (msCURSOR_LARGE_WATCH,      &cursor_large_watch,      24, 32);
}

/*____________________________________________________________________
|
| Function: Create_System_Cursor
|
| Input: Called from Init_Cursor_List()
| Output: Creates a system cursor and stores it in the cursor list.
|___________________________________________________________________*/

static void Create_System_Cursor (
  int          cursor,
  CursorShape *shape,
  int          dx,
  int          dy )
{
  int *p;
  unsigned size;
  gxBound box = { 0, 0, 0, 0 };
  int ok = TRUE;
  static byte mask[8] = { 0x80, 0x40, 0x20, 0x10, 0x8, 0x4, 0x2, 0x1 };

/*____________________________________________________________________
|
| Build the data structure in the cursor list for the new cursor.
|___________________________________________________________________*/

  // Set cursor color to white on black
  if (gxGetBitDepth () == gxBITDEPTH_16) {
    ms_Cursor_list[cursor].color.r      = 255;
    ms_Cursor_list[cursor].color.g      = 255;
    ms_Cursor_list[cursor].color.b      = 255;
    ms_Cursor_list[cursor].mask_color.r = 8;  // can't use zero since won't show up with autotracking
    ms_Cursor_list[cursor].mask_color.g = 8;
    ms_Cursor_list[cursor].mask_color.b = 8;
  }
  else {
    ms_Cursor_list[cursor].color.r      = 255;
    ms_Cursor_list[cursor].color.g      = 255;
    ms_Cursor_list[cursor].color.b      = 255;
    ms_Cursor_list[cursor].mask_color.r = 1;  // can't use zero since won't show up with autotracking
    ms_Cursor_list[cursor].mask_color.g = 1;
    ms_Cursor_list[cursor].mask_color.b = 1;
  }
  ms_Cursor_list[cursor].x  = shape->hot_x;
  ms_Cursor_list[cursor].y  = shape->hot_y;
  ms_Cursor_list[cursor].dx = dx;
  ms_Cursor_list[cursor].dy = dy;
  box.w = dx;
  box.h = dy;
  size = gxBitmapSize (box);
  ms_Cursor_list[cursor].data1 = (byte *) malloc (size);
  if (ms_Cursor_list[cursor].data1) {
    p = (int *)(ms_Cursor_list[cursor].data1);
    *p     = box.w;
    *(p+1) = box.h;
    memcpy ((void *)(p+2), shape->screen_mask, size-(2*sizeof(int)));
  }
  else
    ok = FALSE;
  ms_Cursor_list[cursor].data2 = (byte *) malloc (size);
  if (ms_Cursor_list[cursor].data2) {
    p = (int *)(ms_Cursor_list[cursor].data2);
    *p     = box.w;
    *(p+1) = box.h;
    memcpy ((void *)(p+2), shape->cursor_mask, size-(2*sizeof(int)));
  }
  else
    ok = FALSE;

/*____________________________________________________________________
|
| If any errors, release all memory.
|___________________________________________________________________*/

  if (NOT ok) {
    if (ms_Cursor_list[cursor].data1)
      free (ms_Cursor_list[cursor].data1);
    if (ms_Cursor_list[cursor].data2)
      free (ms_Cursor_list[cursor].data2);
  }
  else
    ms_Cursor_list[cursor].type = CURSOR_TYPE_SYSTEM;
}

/*____________________________________________________________________
|
| Function: msStopMouse
|
| Outputs: Resets mouse and deletes any user-defined cursors.
|___________________________________________________________________*/

void msStopMouse (void)
{
  if (ms_Mouse_exists) {
    if (NOT ms_Cursor_auto_tracking) {
      if (Cursor_Visible()) 
        Cursor_Hide ();
      Cursor_Init (NULL);
    }
    Free_Cursor_List ();
    ms_Mouse_exists = FALSE;
  }
}

/*____________________________________________________________________
|
| Function: Free_Cursor_List
|
| Input: Called from msStopMouse()
| Outputs: Frees all predefined cursors setup in Init_Cursor_List().
|       Caller is responsible for freeing memory associated with user-
|       defined cursors.
|___________________________________________________________________*/

static void Free_Cursor_List (void)
{
  int i;

  // Delete all cursors
  for (i=0; i<MAX_CURSORS; i++) {
    // Is this a valid cursor
    if (ms_Cursor_list[i].type) {
      // Free memory for a system cursor
      if (ms_Cursor_list[i].type == CURSOR_TYPE_SYSTEM) {
                                free (ms_Cursor_list[i].data1);
                                free (ms_Cursor_list[i].data2);
      }
    }
    ms_Cursor_list[i].type = 0;
  }
}

/*____________________________________________________________________
|
| Function: msHideMouse
|
| Outputs: Removes the mouse cursor from the screen.  Call this function
|   before you write or draw anything to the screen.  It's also a good
|   idea to turn off the mouse at the end of a program.  Use msShowMouse()
|   to restore the mouse on the screen.  The mouse movement will be
|   maintained while the mouse is not visible.
|___________________________________________________________________*/

void msHideMouse (void)
{
  if (ms_Mouse_exists) {
    if (NOT ms_Cursor_auto_tracking)
      Cursor_Hide ();
    else
      (*Mouse_hide) ();
  }
}

/*____________________________________________________________________
|
| Function: msShowMouse
|
| Outputs: Display the mouse cursor.
|___________________________________________________________________*/

void msShowMouse (void)
{
  if (ms_Mouse_exists) {
    if (NOT ms_Cursor_auto_tracking)
      Cursor_Show ();
    else
      (*Mouse_show) ();
  }
}

/*____________________________________________________________________
|
| Function: msUpdateMouse
|
| Outputs: Redraws mouse cursor at latest x,y position, if the cursor
|       is currently visible.
|___________________________________________________________________*/

void msUpdateMouse (void)
{
  int x, y;

  if (ms_Mouse_exists) 
    if (NOT ms_Cursor_auto_tracking) {
      msGetMouseCoords (&x, &y);
      Cursor_Update (x, y);
    }
}

/*____________________________________________________________________
|
| Function: msSetMouseSpeed
|
| Inputs: A value indicating the sensitivity to set the mouse to
| Outputs: Sets the sensitivity and double speed threshold to one of
|       five settings.
|
|       Currently, unsupported.
|___________________________________________________________________*/

void msSetMouseSpeed (int speed)
{
}

/*____________________________________________________________________
|
| Function: msConfineMouse
|
| Inputs: A rectangle.
| Outputs: Confines the mouse to the specified rectangle.
|___________________________________________________________________*/

void msConfineMouse (int left, int top, int right, int bottom)
{
  (*Mouse_confine) (left, top, right, bottom);
}

/*____________________________________________________________________
|
| Function: msGetMouseStatus
|
| Outputs: Gets CURRENT x,y position of mouse and button press info
|       about what buttons are CURRENTLY being pressed.
|
|       Returns false if no mouse present in the system.
|___________________________________________________________________*/

int msGetMouseStatus (int *x, int *y, int *button)
{
	int btn;

  (*Mouse_get_status) (x, y, &btn);
  *button = 0;
	if (btn & 0x1)
		*button |= msBUTTON_LEFT_PRESS;
	if (btn & 0x2)
		*button |= msBUTTON_RIGHT_PRESS;


  return (ms_Mouse_exists);
}

/*____________________________________________________________________
|
| Function: msSetMouseCoords
|
| Inputs: x,y screen coordinates.
| Outputs: Moves the mouse to the location x,y.
|___________________________________________________________________*/

void msSetMouseCoords (int x, int y)
{
  (*Mouse_set_coords) (x, y);
}

/*____________________________________________________________________
|
| Function: msGetMouseCoords
|
| Outputs: Gets x,y coordinates of where mouse is currently located.
|       If using a 320 horizontal pixel mode, x should be divided by 2
|       before using because the mouse driver will return a value 0-639.
|___________________________________________________________________*/

void msGetMouseCoords (int *x, int *y)
{
  (*Mouse_get_coords) (x, y);
}

/*____________________________________________________________________
|
| Function: msGetMouseMovement
|
| Outputs: Find out how far the mouse has moved since the last call to
|       this function.  If using a 320 horizontal pixel mode, x should
|       be divided by 2 before using because the mouse driver will return
|       a value 0-639.
|___________________________________________________________________*/

void msGetMouseMovement (int *x, int *y)
{
  (*Mouse_get_movement) (x, y);
}

/*____________________________________________________________________
|
| Function: msMouseInBox
|
| Inputs: Coords specifying a rectangle on screen.  Also an x,y
|       representing the mouse position.
| Outputs: Returns true if x,y is in rectangle (inclusive), else false.
|___________________________________________________________________*/

int msMouseInBox (
  int left,
  int top,
  int right,
  int bottom,
  int x,
  int y )
{
  return ((x>=left AND x<=right AND y>=top AND y<=bottom) ? 1 : 0);
}

/*____________________________________________________________________
|                                                                          
| Function: msSetCursor
|
| Outputs: Sets the current cursor and color (color applies to bitmap
|       cursors only).
|___________________________________________________________________*/

void msSetCursor (msCursor cursor, gxColor color, gxColor mask_color)
{
  int hidden;

  if (ms_Mouse_exists) 
    // Is cursor # valid?
    if ((cursor >= 0) AND (cursor < MAX_CURSORS))
      // Is cursor valid?
      if (ms_Cursor_list[cursor].type) {
        // Hide cursor if currently visible
        hidden = FALSE;
        if (NOT ms_Cursor_auto_tracking)
          if (Cursor_Visible()) {
            Cursor_Hide ();
            hidden = TRUE;
          }
        
        // Change to new cursor
        ms_Cursor_list[cursor].color = color;
        ms_Cursor_list[cursor].mask_color = mask_color;
        if (NOT ms_Cursor_auto_tracking)
          Cursor_Init (&ms_Cursor_list[cursor]);
        else {
          switch (ms_Cursor_list[cursor].type) {
            case CURSOR_TYPE_SYSTEM:
            case CURSOR_TYPE_BITMAP:	        
							(*Mouse_set_bitmap_cursor) (ms_Cursor_list[cursor].data2 + (2 * sizeof(int)),
																			    ms_Cursor_list[cursor].data1 + (2 * sizeof(int)),
																			    ms_Cursor_list[cursor].dx,
                                          ms_Cursor_list[cursor].dy,
                                          ms_Cursor_list[cursor].x,
                                          ms_Cursor_list[cursor].y,
                                          ms_Cursor_list[cursor].color.r,
                                          ms_Cursor_list[cursor].color.g,
                                          ms_Cursor_list[cursor].color.b,
                                          ms_Cursor_list[cursor].mask_color.r,
                                          ms_Cursor_list[cursor].mask_color.g,
                                          ms_Cursor_list[cursor].mask_color.b );
              break;
            case CURSOR_TYPE_SPRITE: 
              (*Mouse_set_image_cursor) (ms_Cursor_list[cursor].data1 + (2 * sizeof(int)),
                                         ms_Cursor_list[cursor].dx,
                                         ms_Cursor_list[cursor].dy,
                                         ms_Cursor_list[cursor].x,
                                         ms_Cursor_list[cursor].y );
              break;
          }
        }
        ms_Mouse_cursor = cursor;

        // If cursor was hidden, restore it
        if (hidden)
          Cursor_Show ();
			}
}

/*____________________________________________________________________
|
| Function: msGetCursor
|
| Outputs: Returns the current cursor and color (color applies to bitmap
|       cursors only).  If mouse doesn't exist, returns -1 in cursor.
|___________________________________________________________________*/

void msGetCursor (msCursor *cursor, gxColor *color, gxColor *mask_color)
{
  if (ms_Mouse_exists) {
    *cursor     = ms_Mouse_cursor;
    *color      = ms_Cursor_list[ms_Mouse_cursor].color;
    *mask_color = ms_Cursor_list[ms_Mouse_cursor].mask_color;
  }
  else {
    *cursor           = -1;
    color->index      = 0;
    mask_color->index = 0;
  }
}

/*____________________________________________________________________
|
| Function: msDefineBitmapCursor
|
| Outputs: Creates a user-defined bitmap cursor.  Returns cursor # or
|       -1 on any error. To enable this cursor for display, call
|       msSetCursor().
|
| Description: The two bitmap buffers are the same type as created by
|       gxCreateBitmap().  The first 4 bytes contain the width in
|       pixels of the cursor.  The next 4 bytes contain the height in
|       pixels of the cursor.  The rest of the buffer contain the
|       cursor.  The size of this is (width+7)/8 x height bytes.
|
|       '1' bits in the screen mask bitmap are written to the screen as
|       0 pixels.  '1' bits in the cursor mask bitmap are written to
|       the screen in the cursor color.  Both bitmaps must be the same
|       dimensions (width & height).
|___________________________________________________________________*/

msCursor msDefineBitmapCursor (
  int   hot_x,
  int   hot_y,
  byte *screen_mask_bitmap,
  byte *cursor_mask_bitmap )
{
  int i, dx, dy;
  int *p;
  msCursor cursor = -1;

  // Look for an empty entry in cursor list
  for (i=0; ms_Cursor_list[i].type AND (i<MAX_CURSORS); i++);

  // Is an entry available?
  if (i < MAX_CURSORS) {
    // Get dimensions of the cursor
    p = (int *)screen_mask_bitmap;
    dx = *p;
    dy = *(p+1);
    // Create the cursor
    ms_Cursor_list[i].type  = CURSOR_TYPE_BITMAP;
    ms_Cursor_list[i].x     = hot_x;
    ms_Cursor_list[i].y     = hot_y;
    ms_Cursor_list[i].dx    = dx;
    ms_Cursor_list[i].dy    = dy;
    ms_Cursor_list[i].data1 = screen_mask_bitmap;
    ms_Cursor_list[i].data2 = cursor_mask_bitmap;
  }

  return (cursor);
}

/*____________________________________________________________________
|
| Function: msDefineSpriteCursor
|
| Outputs: Creates a user-defined sprite cursor.  Returns cursor # or
|       -1 on any error. To enable this cursor for display, call
|       msSetCursor().
|
| Description: The sprite buffer is the same type as created by
|       gxCreateSprite().  The first 4 bytes contain the width in
|       pixels of the cursor.  The next 4 bytes contain the height in
|       pixels of the cursor.  The rest of the buffer contain the
|       cursor sprite.
|___________________________________________________________________*/

msCursor msDefineSpriteCursor (int hot_x, int hot_y, byte *sprite)
{
  int i, dx, dy;
  int *p;
  msCursor cursor = -1;

  // Look for an empty entry in cursor list
  for (i=0; ms_Cursor_list[i].type AND (i<MAX_CURSORS); i++);

  // Is an entry available?
  if (i < MAX_CURSORS) {
    // Get dimensions of the cursor
    p = (int *)sprite;
    dx = *p;
    dy = *(p+1);
    // Create the cursor
    ms_Cursor_list[i].type  = CURSOR_TYPE_SPRITE;
    ms_Cursor_list[i].x     = hot_x;
    ms_Cursor_list[i].y     = hot_y;
    ms_Cursor_list[i].dx    = dx;
    ms_Cursor_list[i].dy    = dy;
    ms_Cursor_list[i].data1 = sprite;
  }

  return (cursor);
}
